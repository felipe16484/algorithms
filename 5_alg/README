Camel Case is a naming style common in many programming languages. In Java, method and variable names typically start with a lowercase letter, with all subsequent words starting with a capital letter (example: startThread). Names of classes follow the same pattern, except that they start with a capital letter (example: BlueCar).

Your task is to write a program that creates or splits Camel Case variable, method, and class names.

Input Format

Each line of the input file will begin with an operation (S or C) followed by a semi-colon followed by M, C, or V followed by a semi-colon followed by the words you'll need to operate on.

The operation will either be S (split) or C (combine)

M indicates method, C indicates class, and V indicates variable
In the case of a split operation, the words will be a camel case method, class or variable name that you need to split into a space-delimited list of words starting with a lowercase letter.

In the case of a combine operation, the words will be a space-delimited list of words starting with lowercase letters that you need to combine into the appropriate camel case String. Methods should end with an empty set of parentheses to differentiate them from variable names.
Output Format

For each input line, your program should print either the space-delimited list of words (in the case of a split operation) or the appropriate camel case string (in the case of a combine operation).
Sample Input

S;M;plasticCup()

C;V;mobile phone

C;C;coffee machine

S;C;LargeSoftwareBook

C;M;white sheet of paper

S;V;pictureFrame

Sample Output

plastic cup

mobilePhone

CoffeeMachine

large software book

whiteSheetOfPaper()

picture frame

Explanation

Use Scanner to read in all information as if it were coming from the keyboard.

Print all information to the console using standard output (System.out.print() or System.out.println()).

Outputs must be exact (exact spaces and casing).











Formato de entrada

Cada línea del archivo de entrada comenzará con una operación (S o C) seguida de un punto y coma, seguida de M, C o V seguida de un punto y coma, seguida de las palabras en las que necesitarás operar.

La operación será S (dividir) o C (combinar).

M indica método, C indica clase y V indica variable.

En el caso de una operación de división, las palabras serán un nombre de método, clase o variable en camel case que deberás dividir en una lista de palabras separadas por espacios que comiencen con una letra minúscula.

En el caso de una operación de combinación, las palabras serán una lista de palabras separadas por espacios que comiencen con letras minúsculas que deberás combinar en el String camel case apropiado. 

Los métodos deben terminar con un conjunto vacío de paréntesis para diferenciarlos de los nombres de variables.


# CamelCase: en este estilo, cada palabra comienza con una letra mayúscula, excepto la primera palabra. Por ejemplo: miVariableEjemplo.







length: devuelve la longitud de la cadena de texto.
charAt(index): devuelve el carácter en la posición especificada.
concat(str1, str2, ..., strN): combina dos o más cadenas de texto.
indexOf(substring): devuelve la posición del primer carácter de la subcadena en la cadena de texto.
lastIndexOf(substring): devuelve la posición del último carácter de la subcadena en la cadena de texto.
startsWith(prefix): devuelve true si la cadena de texto comienza con el prefijo especificado, de lo contrario devuelve false.
endsWith(suffix): devuelve true si la cadena de texto termina con el sufijo especificado, de lo contrario devuelve false.
substring(startIndex, endIndex): devuelve una subcadena de la cadena de texto, desde la posición especificada hasta la posición especificada.
slice(startIndex, endIndex): devuelve una subcadena de la cadena de texto, desde la posición especificada hasta la posición especificada.
replace(searchValue, replaceValue): reemplaza el primer valor de búsqueda encontrado en la cadena de texto con el valor de reemplazo especificado.
toUpperCase(): convierte la cadena de texto a mayúsculas.
toLowerCase(): convierte la cadena de texto a minúsculas.
trim(): elimina los espacios en blanco al principio y al final de la cadena de texto.
split(separator): divide la cadena de texto en una matriz de subcadenas en función del separador especificado.


